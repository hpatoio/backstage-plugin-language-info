name: CI & Publish

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: yarn install

      - name: Run TypeScript checks
        run: yarn tsc:full

      # These validations could be skipped on main as they're style/convention checks
      - name: Lint the code
        if: github.event_name == 'pull_request'
        run: yarn lint:all

      - name: Run tests
        if: github.event_name == 'pull_request'
        run: yarn test

      - name: Build the plugin
        run: yarn build

  release:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up jq
        run: sudo apt-get install -y jq

      - name: Get version from lerna.json
        id: get_version
        run: echo "VERSION=$(jq -r .version lerna.json)" >> $GITHUB_OUTPUT

      - name: Create Release Tag
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const version = '${{ steps.get_version.outputs.VERSION }}';

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${version}`,
              sha: context.sha
            });

            console.log(`Created tag: ${version}`);

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: "https://registry.npmjs.org/"

      - name: Install dependencies
        run: yarn install

      - name: Publish to npm.js
        run: yarn publish:npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
